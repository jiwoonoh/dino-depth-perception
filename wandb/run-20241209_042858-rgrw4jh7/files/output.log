Epoch 1/1:   0%|          | 0/50 [00:00<?, ?it/s]/Users/panwapromtep/dino-depth-perception/dataset.py:46: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  data = torch.load(self.file_path)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
Epoch 1/1:  16%|█▌        | 8/50 [00:02<00:14,  2.90it/s, loss=1.23]
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
torch.Size([2, 6])
tensor([[-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140],
        [-0.0376,  0.0048,  0.0042, -0.0248, -0.0295, -0.0140]],
       grad_fn=<MeanBackward1>)
